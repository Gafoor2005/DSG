version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - USER_SERVICE_URL=http://user-service:3000
      - CONTENT_SERVICE_URL=http://content-service:3002
      - NOTIFICATION_SERVICE_URL=http://notification-service:3003
      - CHAT_SERVICE_URL=http://chat-service:3004
      - ANALYTICS_SERVICE_URL=http://analytics-service:3005
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - user-service
      # - content-service
      # - notification-service
      # - chat-service
      # - analytics-service
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    networks:
      - social-network

  # User Service
  user-service:
    build: ./user-service
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=users_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-super-secret-jwt-key-for-development-only
    depends_on:     
      - postgres
      - redis
    volumes:
      - ./user-service:/app
      - /app/node_modules
    networks:
      - social-network

  # Content Service
  content-service:
    build: ./content-service
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - MONGO_URL=mongodb://mongo:27017/content_db
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
    depends_on:
      - mongo
      - redis
    volumes:
      - ./content-service:/app
      - /app/node_modules
    networks:
      - social-network

  # Notification Service
  notification-service:
    build: ./notification-service
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - EMAIL_SERVICE_KEY=your-email-service-key
    depends_on:
      - redis
    volumes:
      - ./notification-service:/app
      - /app/node_modules
    networks:
      - social-network

  # Chat Service
  chat-service:
    build: ./chat-service
    ports:
      - "3004:3000"
    environment:
      - NODE_ENV=development
      - MONGO_URL=mongodb://mongo:27017/chat_db
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
    depends_on:
      - mongo
      - redis
    volumes:
      - ./chat-service:/app
      - /app/node_modules
    networks:
      - social-network

  # Analytics Service
  analytics-service:
    build: ./analytics-service
    ports:
      - "3005:3000"
    environment:
      - NODE_ENV=development
      - MONGO_URL=mongodb://mongo:27017/analytics_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis
    volumes:
      - ./analytics-service:/app
      - /app/node_modules
    networks:
      - social-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=users_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - social-network

  # MongoDB Database
  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo_data:/data/db
    networks:
      - social-network

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - social-network

  # NGINX API Gateway Alternative (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
    networks:
      - social-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - social-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3006:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - social-network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - social-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - social-network

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  social-network:
    driver: bridge